generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  apiKeys       ApiKey[]
  campaigns     Campaign[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// prisma/schema.prisma
model ApiKey {
  id        String   @id @default(cuid())
  name      String
  type      String   // "SMTP" or "API"
  key       String?  // API key for API type
  host      String?  // For SMTP
  port      Int?     // For SMTP
  username  String?  // For SMTP
  password  String?  // For SMTP
  isDefault Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  campaigns Campaign[]
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groups    GroupContact[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contacts    GroupContact[]
  campaigns   Campaign[]
}

model GroupContact {
  groupId    String
  contactId  String
  group      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([groupId, contactId])
}

model Template {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  campaigns Campaign[]
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  subject     String
  senderEmail String    // Add this new field
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId  String
  template    Template  @relation(fields: [templateId], references: [id])
  groupId     String
  group       Group     @relation(fields: [groupId], references: [id])
  apiKeyId    String?
  status      String    @default("DRAFT") // DRAFT, SCHEDULED, SENDING, COMPLETED, FAILED
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ApiKey      ApiKey[]
}

model EmailLog {
  id          String    @id @default(cuid())
  campaignId  String
  contactEmail String
  status      String    // SENT, DELIVERED, OPENED, CLICKED, BOUNCED, FAILED
  messageId   String?
  sentAt      DateTime
  updatedAt   DateTime  @updatedAt
}